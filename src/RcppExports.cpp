// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// run_mcmc_logistic_treat_inter
List run_mcmc_logistic_treat_inter(const arma::vec& y, const arma::mat& X, const arma::vec& z, int n_iter, int burn, int thin, double sigma2_prior_a, double sigma2_prior_b, double prop_sd_alpha, double prop_sd_bmain, double prop_sd_bint, double alpha_init, double sigma_init, bool interaction);
RcppExport SEXP _bcf_run_mcmc_logistic_treat_inter(SEXP ySEXP, SEXP XSEXP, SEXP zSEXP, SEXP n_iterSEXP, SEXP burnSEXP, SEXP thinSEXP, SEXP sigma2_prior_aSEXP, SEXP sigma2_prior_bSEXP, SEXP prop_sd_alphaSEXP, SEXP prop_sd_bmainSEXP, SEXP prop_sd_bintSEXP, SEXP alpha_initSEXP, SEXP sigma_initSEXP, SEXP interactionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_prior_a(sigma2_prior_aSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_prior_b(sigma2_prior_bSEXP);
    Rcpp::traits::input_parameter< double >::type prop_sd_alpha(prop_sd_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type prop_sd_bmain(prop_sd_bmainSEXP);
    Rcpp::traits::input_parameter< double >::type prop_sd_bint(prop_sd_bintSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_init(alpha_initSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_init(sigma_initSEXP);
    Rcpp::traits::input_parameter< bool >::type interaction(interactionSEXP);
    rcpp_result_gen = Rcpp::wrap(run_mcmc_logistic_treat_inter(y, X, z, n_iter, burn, thin, sigma2_prior_a, sigma2_prior_b, prop_sd_alpha, prop_sd_bmain, prop_sd_bint, alpha_init, sigma_init, interaction));
    return rcpp_result_gen;
END_RCPP
}
// bcfoverparRcppClean
List bcfoverparRcppClean(NumericVector y_, NumericVector z_, NumericVector w_, NumericVector x_con_, NumericVector x_mod_, List x_con_info_list, List x_mod_info_list, arma::mat random_des, arma::mat random_var, arma::mat random_var_ix, double random_var_df, int burn, int nd, int thin, int ntree_mod, int ntree_con, double lambda, double nu, double con_sd, double mod_sd, double con_alpha, double con_beta, double mod_alpha, double mod_beta, CharacterVector treef_con_name_, CharacterVector treef_mod_name_, int status_interval, bool RJ, bool use_mscale, bool use_bscale, bool b_half_normal, double trt_init, bool verbose_sigma, bool no_output);
RcppExport SEXP _bcf_bcfoverparRcppClean(SEXP y_SEXP, SEXP z_SEXP, SEXP w_SEXP, SEXP x_con_SEXP, SEXP x_mod_SEXP, SEXP x_con_info_listSEXP, SEXP x_mod_info_listSEXP, SEXP random_desSEXP, SEXP random_varSEXP, SEXP random_var_ixSEXP, SEXP random_var_dfSEXP, SEXP burnSEXP, SEXP ndSEXP, SEXP thinSEXP, SEXP ntree_modSEXP, SEXP ntree_conSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP con_sdSEXP, SEXP mod_sdSEXP, SEXP con_alphaSEXP, SEXP con_betaSEXP, SEXP mod_alphaSEXP, SEXP mod_betaSEXP, SEXP treef_con_name_SEXP, SEXP treef_mod_name_SEXP, SEXP status_intervalSEXP, SEXP RJSEXP, SEXP use_mscaleSEXP, SEXP use_bscaleSEXP, SEXP b_half_normalSEXP, SEXP trt_initSEXP, SEXP verbose_sigmaSEXP, SEXP no_outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y_(y_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z_(z_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_(w_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_con_(x_con_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_mod_(x_mod_SEXP);
    Rcpp::traits::input_parameter< List >::type x_con_info_list(x_con_info_listSEXP);
    Rcpp::traits::input_parameter< List >::type x_mod_info_list(x_mod_info_listSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_des(random_desSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_var(random_varSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_var_ix(random_var_ixSEXP);
    Rcpp::traits::input_parameter< double >::type random_var_df(random_var_dfSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_mod(ntree_modSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_con(ntree_conSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type con_sd(con_sdSEXP);
    Rcpp::traits::input_parameter< double >::type mod_sd(mod_sdSEXP);
    Rcpp::traits::input_parameter< double >::type con_alpha(con_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type con_beta(con_betaSEXP);
    Rcpp::traits::input_parameter< double >::type mod_alpha(mod_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type mod_beta(mod_betaSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_con_name_(treef_con_name_SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_mod_name_(treef_mod_name_SEXP);
    Rcpp::traits::input_parameter< int >::type status_interval(status_intervalSEXP);
    Rcpp::traits::input_parameter< bool >::type RJ(RJSEXP);
    Rcpp::traits::input_parameter< bool >::type use_mscale(use_mscaleSEXP);
    Rcpp::traits::input_parameter< bool >::type use_bscale(use_bscaleSEXP);
    Rcpp::traits::input_parameter< bool >::type b_half_normal(b_half_normalSEXP);
    Rcpp::traits::input_parameter< double >::type trt_init(trt_initSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose_sigma(verbose_sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type no_output(no_outputSEXP);
    rcpp_result_gen = Rcpp::wrap(bcfoverparRcppClean(y_, z_, w_, x_con_, x_mod_, x_con_info_list, x_mod_info_list, random_des, random_var, random_var_ix, random_var_df, burn, nd, thin, ntree_mod, ntree_con, lambda, nu, con_sd, mod_sd, con_alpha, con_beta, mod_alpha, mod_beta, treef_con_name_, treef_mod_name_, status_interval, RJ, use_mscale, use_bscale, b_half_normal, trt_init, verbose_sigma, no_output));
    return rcpp_result_gen;
END_RCPP
}
// bcfoverparRcppCleanLinear
List bcfoverparRcppCleanLinear(NumericVector y_, NumericVector z_, NumericVector w_, NumericVector x_con_, NumericVector x_mod_, List x_con_info_list, List x_mod_info_list, arma::mat random_des, arma::mat random_var, arma::mat random_var_ix, double random_var_df, int burn, int nd, int thin, int ntree_mod, int ntree_con, double lambda, double nu, double con_sd, double mod_sd, double con_alpha, double con_beta, double mod_alpha, double mod_beta, CharacterVector treef_con_name_, CharacterVector treef_mod_name_, int status_interval, bool RJ, bool use_mscale, bool use_bscale, bool b_half_normal, double trt_init, bool verbose_sigma, bool no_output, bool intTreat, bool hamiltonian, double step_size, int num_of_steps, bool sparse);
RcppExport SEXP _bcf_bcfoverparRcppCleanLinear(SEXP y_SEXP, SEXP z_SEXP, SEXP w_SEXP, SEXP x_con_SEXP, SEXP x_mod_SEXP, SEXP x_con_info_listSEXP, SEXP x_mod_info_listSEXP, SEXP random_desSEXP, SEXP random_varSEXP, SEXP random_var_ixSEXP, SEXP random_var_dfSEXP, SEXP burnSEXP, SEXP ndSEXP, SEXP thinSEXP, SEXP ntree_modSEXP, SEXP ntree_conSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP con_sdSEXP, SEXP mod_sdSEXP, SEXP con_alphaSEXP, SEXP con_betaSEXP, SEXP mod_alphaSEXP, SEXP mod_betaSEXP, SEXP treef_con_name_SEXP, SEXP treef_mod_name_SEXP, SEXP status_intervalSEXP, SEXP RJSEXP, SEXP use_mscaleSEXP, SEXP use_bscaleSEXP, SEXP b_half_normalSEXP, SEXP trt_initSEXP, SEXP verbose_sigmaSEXP, SEXP no_outputSEXP, SEXP intTreatSEXP, SEXP hamiltonianSEXP, SEXP step_sizeSEXP, SEXP num_of_stepsSEXP, SEXP sparseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y_(y_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z_(z_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_(w_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_con_(x_con_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_mod_(x_mod_SEXP);
    Rcpp::traits::input_parameter< List >::type x_con_info_list(x_con_info_listSEXP);
    Rcpp::traits::input_parameter< List >::type x_mod_info_list(x_mod_info_listSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_des(random_desSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_var(random_varSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_var_ix(random_var_ixSEXP);
    Rcpp::traits::input_parameter< double >::type random_var_df(random_var_dfSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_mod(ntree_modSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_con(ntree_conSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type con_sd(con_sdSEXP);
    Rcpp::traits::input_parameter< double >::type mod_sd(mod_sdSEXP);
    Rcpp::traits::input_parameter< double >::type con_alpha(con_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type con_beta(con_betaSEXP);
    Rcpp::traits::input_parameter< double >::type mod_alpha(mod_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type mod_beta(mod_betaSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_con_name_(treef_con_name_SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_mod_name_(treef_mod_name_SEXP);
    Rcpp::traits::input_parameter< int >::type status_interval(status_intervalSEXP);
    Rcpp::traits::input_parameter< bool >::type RJ(RJSEXP);
    Rcpp::traits::input_parameter< bool >::type use_mscale(use_mscaleSEXP);
    Rcpp::traits::input_parameter< bool >::type use_bscale(use_bscaleSEXP);
    Rcpp::traits::input_parameter< bool >::type b_half_normal(b_half_normalSEXP);
    Rcpp::traits::input_parameter< double >::type trt_init(trt_initSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose_sigma(verbose_sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type no_output(no_outputSEXP);
    Rcpp::traits::input_parameter< bool >::type intTreat(intTreatSEXP);
    Rcpp::traits::input_parameter< bool >::type hamiltonian(hamiltonianSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type num_of_steps(num_of_stepsSEXP);
    Rcpp::traits::input_parameter< bool >::type sparse(sparseSEXP);
    rcpp_result_gen = Rcpp::wrap(bcfoverparRcppCleanLinear(y_, z_, w_, x_con_, x_mod_, x_con_info_list, x_mod_info_list, random_des, random_var, random_var_ix, random_var_df, burn, nd, thin, ntree_mod, ntree_con, lambda, nu, con_sd, mod_sd, con_alpha, con_beta, mod_alpha, mod_beta, treef_con_name_, treef_mod_name_, status_interval, RJ, use_mscale, use_bscale, b_half_normal, trt_init, verbose_sigma, no_output, intTreat, hamiltonian, step_size, num_of_steps, sparse));
    return rcpp_result_gen;
END_RCPP
}
// bcflineartwo
List bcflineartwo(NumericVector y_, NumericVector z_, NumericVector w_, NumericVector x_con_, NumericVector x_mod_, List x_con_info_list, List x_mod_info_list, arma::mat random_des, arma::mat random_var, arma::mat random_var_ix, double random_var_df, int burn, int nd, int thin, int ntree_mod, int ntree_con, double lambda, double nu, double con_sd, double mod_sd, double con_alpha, double con_beta, double mod_alpha, double mod_beta, CharacterVector treef_con_name_, CharacterVector treef_mod_name_, int status_interval, bool RJ, bool use_mscale, bool use_bscale, bool b_half_normal, double trt_init, bool verbose_sigma, bool no_output, bool tian);
RcppExport SEXP _bcf_bcflineartwo(SEXP y_SEXP, SEXP z_SEXP, SEXP w_SEXP, SEXP x_con_SEXP, SEXP x_mod_SEXP, SEXP x_con_info_listSEXP, SEXP x_mod_info_listSEXP, SEXP random_desSEXP, SEXP random_varSEXP, SEXP random_var_ixSEXP, SEXP random_var_dfSEXP, SEXP burnSEXP, SEXP ndSEXP, SEXP thinSEXP, SEXP ntree_modSEXP, SEXP ntree_conSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP con_sdSEXP, SEXP mod_sdSEXP, SEXP con_alphaSEXP, SEXP con_betaSEXP, SEXP mod_alphaSEXP, SEXP mod_betaSEXP, SEXP treef_con_name_SEXP, SEXP treef_mod_name_SEXP, SEXP status_intervalSEXP, SEXP RJSEXP, SEXP use_mscaleSEXP, SEXP use_bscaleSEXP, SEXP b_half_normalSEXP, SEXP trt_initSEXP, SEXP verbose_sigmaSEXP, SEXP no_outputSEXP, SEXP tianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y_(y_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z_(z_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_(w_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_con_(x_con_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_mod_(x_mod_SEXP);
    Rcpp::traits::input_parameter< List >::type x_con_info_list(x_con_info_listSEXP);
    Rcpp::traits::input_parameter< List >::type x_mod_info_list(x_mod_info_listSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_des(random_desSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_var(random_varSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_var_ix(random_var_ixSEXP);
    Rcpp::traits::input_parameter< double >::type random_var_df(random_var_dfSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_mod(ntree_modSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_con(ntree_conSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type con_sd(con_sdSEXP);
    Rcpp::traits::input_parameter< double >::type mod_sd(mod_sdSEXP);
    Rcpp::traits::input_parameter< double >::type con_alpha(con_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type con_beta(con_betaSEXP);
    Rcpp::traits::input_parameter< double >::type mod_alpha(mod_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type mod_beta(mod_betaSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_con_name_(treef_con_name_SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_mod_name_(treef_mod_name_SEXP);
    Rcpp::traits::input_parameter< int >::type status_interval(status_intervalSEXP);
    Rcpp::traits::input_parameter< bool >::type RJ(RJSEXP);
    Rcpp::traits::input_parameter< bool >::type use_mscale(use_mscaleSEXP);
    Rcpp::traits::input_parameter< bool >::type use_bscale(use_bscaleSEXP);
    Rcpp::traits::input_parameter< bool >::type b_half_normal(b_half_normalSEXP);
    Rcpp::traits::input_parameter< double >::type trt_init(trt_initSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose_sigma(verbose_sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type no_output(no_outputSEXP);
    Rcpp::traits::input_parameter< bool >::type tian(tianSEXP);
    rcpp_result_gen = Rcpp::wrap(bcflineartwo(y_, z_, w_, x_con_, x_mod_, x_con_info_list, x_mod_info_list, random_des, random_var, random_var_ix, random_var_df, burn, nd, thin, ntree_mod, ntree_con, lambda, nu, con_sd, mod_sd, con_alpha, con_beta, mod_alpha, mod_beta, treef_con_name_, treef_mod_name_, status_interval, RJ, use_mscale, use_bscale, b_half_normal, trt_init, verbose_sigma, no_output, tian));
    return rcpp_result_gen;
END_RCPP
}
// sample_beta_j
double sample_beta_j(int N, NumericVector r_beta, NumericVector z, NumericVector w_j, double tau_j, double sigma);
RcppExport SEXP _bcf_sample_beta_j(SEXP NSEXP, SEXP r_betaSEXP, SEXP zSEXP, SEXP w_jSEXP, SEXP tau_jSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_beta(r_betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_j(w_jSEXP);
    Rcpp::traits::input_parameter< double >::type tau_j(tau_jSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_beta_j(N, r_beta, z, w_j, tau_j, sigma));
    return rcpp_result_gen;
END_RCPP
}
// sample_tau_j_slice
double sample_tau_j_slice(double tau_old, double beta_j, int index, const std::vector<double>& beta_int, const std::vector<double>& tau, double tau_int, double sigma, bool interaction, double step_out, int max_steps);
RcppExport SEXP _bcf_sample_tau_j_slice(SEXP tau_oldSEXP, SEXP beta_jSEXP, SEXP indexSEXP, SEXP beta_intSEXP, SEXP tauSEXP, SEXP tau_intSEXP, SEXP sigmaSEXP, SEXP interactionSEXP, SEXP step_outSEXP, SEXP max_stepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type tau_old(tau_oldSEXP);
    Rcpp::traits::input_parameter< double >::type beta_j(beta_jSEXP);
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type beta_int(beta_intSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type tau_int(tau_intSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type interaction(interactionSEXP);
    Rcpp::traits::input_parameter< double >::type step_out(step_outSEXP);
    Rcpp::traits::input_parameter< int >::type max_steps(max_stepsSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_tau_j_slice(tau_old, beta_j, index, beta_int, tau, tau_int, sigma, interaction, step_out, max_steps));
    return rcpp_result_gen;
END_RCPP
}
// sample_alpha
double sample_alpha(int N, NumericVector r_alpha, NumericVector z_, double sigma, double alpha_prior_sd);
RcppExport SEXP _bcf_sample_alpha(SEXP NSEXP, SEXP r_alphaSEXP, SEXP z_SEXP, SEXP sigmaSEXP, SEXP alpha_prior_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_alpha(r_alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z_(z_SEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_prior_sd(alpha_prior_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_alpha(N, r_alpha, z_, sigma, alpha_prior_sd));
    return rcpp_result_gen;
END_RCPP
}
// sample_sigma2_ig
double sample_sigma2_ig(int N, NumericVector resid, double shape_prior, double rate_prior);
RcppExport SEXP _bcf_sample_sigma2_ig(SEXP NSEXP, SEXP residSEXP, SEXP shape_priorSEXP, SEXP rate_priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type resid(residSEXP);
    Rcpp::traits::input_parameter< double >::type shape_prior(shape_priorSEXP);
    Rcpp::traits::input_parameter< double >::type rate_prior(rate_priorSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_sigma2_ig(N, resid, shape_prior, rate_prior));
    return rcpp_result_gen;
END_RCPP
}
// log_posterior_linked_shrinkage
double log_posterior_linked_shrinkage(const arma::vec& param, const arma::mat& X, const arma::vec& y);
RcppExport SEXP _bcf_log_posterior_linked_shrinkage(SEXP paramSEXP, SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type param(paramSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(log_posterior_linked_shrinkage(param, X, y));
    return rcpp_result_gen;
END_RCPP
}
// grad_log_posterior_linked_shrinkage
arma::vec grad_log_posterior_linked_shrinkage(const arma::vec& param, const arma::mat& X, const arma::vec& y);
RcppExport SEXP _bcf_grad_log_posterior_linked_shrinkage(SEXP paramSEXP, SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type param(paramSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(grad_log_posterior_linked_shrinkage(param, X, y));
    return rcpp_result_gen;
END_RCPP
}
// leapfrogCpp
Rcpp::List leapfrogCpp(arma::vec param, arma::vec momentum, double step_size, int num_steps, const arma::mat& X, const arma::vec& y);
RcppExport SEXP _bcf_leapfrogCpp(SEXP paramSEXP, SEXP momentumSEXP, SEXP step_sizeSEXP, SEXP num_stepsSEXP, SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type param(paramSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type num_steps(num_stepsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(leapfrogCpp(param, momentum, step_size, num_steps, X, y));
    return rcpp_result_gen;
END_RCPP
}
// test_visibility
int test_visibility();
RcppExport SEXP _bcf_test_visibility() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test_visibility());
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _stochtree_active_forest_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_add_numeric_split_tree_value_active_forest_cpp(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_add_numeric_split_tree_value_forest_container_cpp(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_add_numeric_split_tree_vector_active_forest_cpp(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_add_numeric_split_tree_vector_forest_container_cpp(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_add_sample_forest_container_cpp(SEXP);
RcppExport SEXP _stochtree_add_sample_value_forest_container_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_add_sample_vector_forest_container_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_add_to_column_vector_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_adjust_residual_active_forest_cpp(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_adjust_residual_forest_container_cpp(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_all_roots_active_forest_cpp(SEXP);
RcppExport SEXP _stochtree_all_roots_forest_container_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_average_max_depth_active_forest_cpp(SEXP);
RcppExport SEXP _stochtree_average_max_depth_forest_container_cpp(SEXP);
RcppExport SEXP _stochtree_compute_leaf_indices_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_create_column_vector_cpp(SEXP);
RcppExport SEXP _stochtree_create_forest_dataset_cpp(void);
RcppExport SEXP _stochtree_create_rfx_dataset_cpp(void);
RcppExport SEXP _stochtree_dataset_has_basis_cpp(SEXP);
RcppExport SEXP _stochtree_dataset_has_variance_weights_cpp(SEXP);
RcppExport SEXP _stochtree_dataset_num_basis_cpp(SEXP);
RcppExport SEXP _stochtree_dataset_num_covariates_cpp(SEXP);
RcppExport SEXP _stochtree_dataset_num_rows_cpp(SEXP);
RcppExport SEXP _stochtree_ensemble_average_max_depth_forest_container_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_ensemble_tree_max_depth_active_forest_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_ensemble_tree_max_depth_forest_container_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_forest_container_append_from_json_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_forest_container_append_from_json_string_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_forest_container_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_forest_container_from_json_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_forest_container_from_json_string_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_forest_container_get_max_leaf_index_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_forest_dataset_add_basis_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_forest_dataset_add_covariates_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_forest_dataset_add_weights_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_forest_dataset_update_basis_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_forest_tracker_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_get_forest_split_counts_forest_container_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_get_granular_split_count_array_active_forest_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_get_granular_split_count_array_forest_container_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_get_json_string_cpp(SEXP);
RcppExport SEXP _stochtree_get_overall_split_counts_active_forest_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_get_overall_split_counts_forest_container_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_get_residual_cpp(SEXP);
RcppExport SEXP _stochtree_get_tree_leaves_active_forest_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_get_tree_leaves_forest_container_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_get_tree_split_counts_active_forest_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_get_tree_split_counts_forest_container_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_init_json_cpp(void);
RcppExport SEXP _stochtree_initialize_forest_model_active_forest_cpp(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_initialize_forest_model_cpp(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_is_categorical_split_node_forest_container_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_is_exponentiated_active_forest_cpp(SEXP);
RcppExport SEXP _stochtree_is_exponentiated_forest_container_cpp(SEXP);
RcppExport SEXP _stochtree_is_leaf_constant_active_forest_cpp(SEXP);
RcppExport SEXP _stochtree_is_leaf_constant_forest_container_cpp(SEXP);
RcppExport SEXP _stochtree_is_leaf_node_forest_container_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_is_numeric_split_node_forest_container_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_json_add_bool_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_json_add_bool_subfolder_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_json_add_double_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_json_add_double_subfolder_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_json_add_forest_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_json_add_integer_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_json_add_integer_subfolder_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_json_add_integer_vector_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_json_add_integer_vector_subfolder_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_json_add_rfx_container_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_json_add_rfx_groupids_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_json_add_rfx_label_mapper_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_json_add_string_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_json_add_string_subfolder_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_json_add_string_vector_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_json_add_string_vector_subfolder_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_json_add_vector_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_json_add_vector_subfolder_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_json_contains_field_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_json_contains_field_subfolder_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_json_extract_bool_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_json_extract_bool_subfolder_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_json_extract_double_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_json_extract_double_subfolder_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_json_extract_integer_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_json_extract_integer_subfolder_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_json_extract_integer_vector_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_json_extract_integer_vector_subfolder_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_json_extract_string_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_json_extract_string_subfolder_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_json_extract_string_vector_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_json_extract_string_vector_subfolder_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_json_extract_vector_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_json_extract_vector_subfolder_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_json_increment_rfx_count_cpp(SEXP);
RcppExport SEXP _stochtree_json_load_file_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_json_load_forest_container_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_json_load_string_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_json_save_file_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_json_save_forest_container_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_leaf_dimension_active_forest_cpp(SEXP);
RcppExport SEXP _stochtree_leaf_dimension_forest_container_cpp(SEXP);
RcppExport SEXP _stochtree_leaf_values_forest_container_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_leaves_forest_container_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_left_child_node_forest_container_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_node_depth_forest_container_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_nodes_forest_container_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_num_leaf_parents_forest_container_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_num_leaves_ensemble_forest_container_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_num_leaves_forest_container_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_num_nodes_forest_container_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_num_samples_forest_container_cpp(SEXP);
RcppExport SEXP _stochtree_num_split_nodes_forest_container_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_num_trees_active_forest_cpp(SEXP);
RcppExport SEXP _stochtree_num_trees_forest_container_cpp(SEXP);
RcppExport SEXP _stochtree_overwrite_column_vector_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_parent_node_forest_container_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_predict_active_forest_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_predict_forest_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_predict_forest_raw_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_predict_forest_raw_single_forest_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_predict_forest_raw_single_tree_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_predict_raw_active_forest_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_propagate_basis_update_active_forest_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_propagate_basis_update_forest_container_cpp(SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_propagate_trees_column_vector_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_remove_sample_forest_container_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_reset_active_forest_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_reset_forest_model_cpp(SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_reset_rfx_model_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_reset_rfx_tracker_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_rfx_container_append_from_json_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_rfx_container_append_from_json_string_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_rfx_container_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_rfx_container_delete_sample_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_rfx_container_from_json_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_rfx_container_from_json_string_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_rfx_container_get_alpha_cpp(SEXP);
RcppExport SEXP _stochtree_rfx_container_get_beta_cpp(SEXP);
RcppExport SEXP _stochtree_rfx_container_get_sigma_cpp(SEXP);
RcppExport SEXP _stochtree_rfx_container_get_xi_cpp(SEXP);
RcppExport SEXP _stochtree_rfx_container_num_components_cpp(SEXP);
RcppExport SEXP _stochtree_rfx_container_num_groups_cpp(SEXP);
RcppExport SEXP _stochtree_rfx_container_num_samples_cpp(SEXP);
RcppExport SEXP _stochtree_rfx_container_predict_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_rfx_dataset_add_basis_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_rfx_dataset_add_group_labels_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_rfx_dataset_add_weights_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_rfx_dataset_has_basis_cpp(SEXP);
RcppExport SEXP _stochtree_rfx_dataset_has_group_labels_cpp(SEXP);
RcppExport SEXP _stochtree_rfx_dataset_has_variance_weights_cpp(SEXP);
RcppExport SEXP _stochtree_rfx_dataset_num_rows_cpp(SEXP);
RcppExport SEXP _stochtree_rfx_group_ids_from_json_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_rfx_group_ids_from_json_string_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_rfx_label_mapper_cpp(SEXP);
RcppExport SEXP _stochtree_rfx_label_mapper_from_json_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_rfx_label_mapper_from_json_string_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_rfx_label_mapper_to_list_cpp(SEXP);
RcppExport SEXP _stochtree_rfx_model_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_rfx_model_predict_cpp(SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_rfx_model_sample_random_effects_cpp(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_rfx_model_set_group_parameter_covariance_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_rfx_model_set_group_parameters_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_rfx_model_set_variance_prior_scale_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_rfx_model_set_variance_prior_shape_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_rfx_model_set_working_parameter_covariance_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_rfx_model_set_working_parameter_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_rfx_tracker_cpp(SEXP);
RcppExport SEXP _stochtree_rfx_tracker_get_unique_group_ids_cpp(SEXP);
RcppExport SEXP _stochtree_right_child_node_forest_container_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_rng_cpp(SEXP);
RcppExport SEXP _stochtree_root_reset_active_forest_cpp(SEXP);
RcppExport SEXP _stochtree_root_reset_rfx_tracker_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_sample_gfr_one_iteration_cpp(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_sample_mcmc_one_iteration_cpp(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_sample_sigma2_one_iteration_cpp(SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_sample_tau_one_iteration_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_set_leaf_value_active_forest_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_set_leaf_value_forest_container_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_set_leaf_vector_active_forest_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_set_leaf_vector_forest_container_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_split_categories_forest_container_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_split_index_forest_container_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_split_theshold_forest_container_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_subtract_from_column_vector_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_sum_leaves_squared_ensemble_forest_container_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_tree_prior_cpp(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _stochtree_update_alpha_tree_prior_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_update_beta_tree_prior_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_update_max_depth_tree_prior_cpp(SEXP, SEXP);
RcppExport SEXP _stochtree_update_min_samples_leaf_tree_prior_cpp(SEXP, SEXP);
RcppExport SEXP _rcpp_module_boot_TreeSamples();

static const R_CallMethodDef CallEntries[] = {
    {"_bcf_run_mcmc_logistic_treat_inter", (DL_FUNC) &_bcf_run_mcmc_logistic_treat_inter, 14},
    {"_bcf_bcfoverparRcppClean", (DL_FUNC) &_bcf_bcfoverparRcppClean, 34},
    {"_bcf_bcfoverparRcppCleanLinear", (DL_FUNC) &_bcf_bcfoverparRcppCleanLinear, 39},
    {"_bcf_bcflineartwo", (DL_FUNC) &_bcf_bcflineartwo, 35},
    {"_bcf_sample_beta_j", (DL_FUNC) &_bcf_sample_beta_j, 6},
    {"_bcf_sample_tau_j_slice", (DL_FUNC) &_bcf_sample_tau_j_slice, 10},
    {"_bcf_sample_alpha", (DL_FUNC) &_bcf_sample_alpha, 5},
    {"_bcf_sample_sigma2_ig", (DL_FUNC) &_bcf_sample_sigma2_ig, 4},
    {"_bcf_log_posterior_linked_shrinkage", (DL_FUNC) &_bcf_log_posterior_linked_shrinkage, 3},
    {"_bcf_grad_log_posterior_linked_shrinkage", (DL_FUNC) &_bcf_grad_log_posterior_linked_shrinkage, 3},
    {"_bcf_leapfrogCpp", (DL_FUNC) &_bcf_leapfrogCpp, 6},
    {"_bcf_test_visibility", (DL_FUNC) &_bcf_test_visibility, 0},
    {"_rcpp_module_boot_TreeSamples", (DL_FUNC) &_rcpp_module_boot_TreeSamples, 0},
    {"_stochtree_active_forest_cpp",                                   (DL_FUNC) &_stochtree_active_forest_cpp,                                    4},
    {"_stochtree_add_numeric_split_tree_value_active_forest_cpp",      (DL_FUNC) &_stochtree_add_numeric_split_tree_value_active_forest_cpp,       7},
    {"_stochtree_add_numeric_split_tree_value_forest_container_cpp",   (DL_FUNC) &_stochtree_add_numeric_split_tree_value_forest_container_cpp,    8},
    {"_stochtree_add_numeric_split_tree_vector_active_forest_cpp",     (DL_FUNC) &_stochtree_add_numeric_split_tree_vector_active_forest_cpp,      7},
    {"_stochtree_add_numeric_split_tree_vector_forest_container_cpp",  (DL_FUNC) &_stochtree_add_numeric_split_tree_vector_forest_container_cpp,   8},
    {"_stochtree_add_sample_forest_container_cpp",                     (DL_FUNC) &_stochtree_add_sample_forest_container_cpp,                      1},
    {"_stochtree_add_sample_value_forest_container_cpp",               (DL_FUNC) &_stochtree_add_sample_value_forest_container_cpp,                2},
    {"_stochtree_add_sample_vector_forest_container_cpp",              (DL_FUNC) &_stochtree_add_sample_vector_forest_container_cpp,               2},
    {"_stochtree_add_to_column_vector_cpp",                            (DL_FUNC) &_stochtree_add_to_column_vector_cpp,                             2},
    {"_stochtree_adjust_residual_active_forest_cpp",                   (DL_FUNC) &_stochtree_adjust_residual_active_forest_cpp,                    6},
    {"_stochtree_adjust_residual_forest_container_cpp",                (DL_FUNC) &_stochtree_adjust_residual_forest_container_cpp,                 7},
    {"_stochtree_all_roots_active_forest_cpp",                         (DL_FUNC) &_stochtree_all_roots_active_forest_cpp,                          1},
    {"_stochtree_all_roots_forest_container_cpp",                      (DL_FUNC) &_stochtree_all_roots_forest_container_cpp,                       2},
    {"_stochtree_average_max_depth_active_forest_cpp",                 (DL_FUNC) &_stochtree_average_max_depth_active_forest_cpp,                  1},
    {"_stochtree_average_max_depth_forest_container_cpp",              (DL_FUNC) &_stochtree_average_max_depth_forest_container_cpp,               1},
    {"_stochtree_compute_leaf_indices_cpp",                            (DL_FUNC) &_stochtree_compute_leaf_indices_cpp,                             3},
    {"_stochtree_create_column_vector_cpp",                            (DL_FUNC) &_stochtree_create_column_vector_cpp,                             1},
    {"_stochtree_create_forest_dataset_cpp",                           (DL_FUNC) &_stochtree_create_forest_dataset_cpp,                            0},
    {"_stochtree_create_rfx_dataset_cpp",                              (DL_FUNC) &_stochtree_create_rfx_dataset_cpp,                               0},
    {"_stochtree_dataset_has_basis_cpp",                               (DL_FUNC) &_stochtree_dataset_has_basis_cpp,                                1},
    {"_stochtree_dataset_has_variance_weights_cpp",                    (DL_FUNC) &_stochtree_dataset_has_variance_weights_cpp,                     1},
    {"_stochtree_dataset_num_basis_cpp",                               (DL_FUNC) &_stochtree_dataset_num_basis_cpp,                                1},
    {"_stochtree_dataset_num_covariates_cpp",                          (DL_FUNC) &_stochtree_dataset_num_covariates_cpp,                           1},
    {"_stochtree_dataset_num_rows_cpp",                                (DL_FUNC) &_stochtree_dataset_num_rows_cpp,                                 1},
    {"_stochtree_ensemble_average_max_depth_forest_container_cpp",     (DL_FUNC) &_stochtree_ensemble_average_max_depth_forest_container_cpp,      2},
    {"_stochtree_ensemble_tree_max_depth_active_forest_cpp",           (DL_FUNC) &_stochtree_ensemble_tree_max_depth_active_forest_cpp,            2},
    {"_stochtree_ensemble_tree_max_depth_forest_container_cpp",        (DL_FUNC) &_stochtree_ensemble_tree_max_depth_forest_container_cpp,         3},
    {"_stochtree_forest_container_append_from_json_cpp",               (DL_FUNC) &_stochtree_forest_container_append_from_json_cpp,                3},
    {"_stochtree_forest_container_append_from_json_string_cpp",        (DL_FUNC) &_stochtree_forest_container_append_from_json_string_cpp,         3},
    {"_stochtree_forest_container_cpp",                                (DL_FUNC) &_stochtree_forest_container_cpp,                                 4},
    {"_stochtree_forest_container_from_json_cpp",                      (DL_FUNC) &_stochtree_forest_container_from_json_cpp,                       2},
    {"_stochtree_forest_container_from_json_string_cpp",               (DL_FUNC) &_stochtree_forest_container_from_json_string_cpp,                2},
    {"_stochtree_forest_container_get_max_leaf_index_cpp",             (DL_FUNC) &_stochtree_forest_container_get_max_leaf_index_cpp,              2},
    {"_stochtree_forest_dataset_add_basis_cpp",                        (DL_FUNC) &_stochtree_forest_dataset_add_basis_cpp,                         2},
    {"_stochtree_forest_dataset_add_covariates_cpp",                   (DL_FUNC) &_stochtree_forest_dataset_add_covariates_cpp,                    2},
    {"_stochtree_forest_dataset_add_weights_cpp",                      (DL_FUNC) &_stochtree_forest_dataset_add_weights_cpp,                       2},
    {"_stochtree_forest_dataset_update_basis_cpp",                     (DL_FUNC) &_stochtree_forest_dataset_update_basis_cpp,                      2},
    {"_stochtree_forest_tracker_cpp",                                  (DL_FUNC) &_stochtree_forest_tracker_cpp,                                   4},
    {"_stochtree_get_forest_split_counts_forest_container_cpp",        (DL_FUNC) &_stochtree_get_forest_split_counts_forest_container_cpp,         3},
    {"_stochtree_get_granular_split_count_array_active_forest_cpp",    (DL_FUNC) &_stochtree_get_granular_split_count_array_active_forest_cpp,     2},
    {"_stochtree_get_granular_split_count_array_forest_container_cpp", (DL_FUNC) &_stochtree_get_granular_split_count_array_forest_container_cpp,  2},
    {"_stochtree_get_json_string_cpp",                                 (DL_FUNC) &_stochtree_get_json_string_cpp,                                  1},
    {"_stochtree_get_overall_split_counts_active_forest_cpp",          (DL_FUNC) &_stochtree_get_overall_split_counts_active_forest_cpp,           2},
    {"_stochtree_get_overall_split_counts_forest_container_cpp",       (DL_FUNC) &_stochtree_get_overall_split_counts_forest_container_cpp,        2},
    {"_stochtree_get_residual_cpp",                                    (DL_FUNC) &_stochtree_get_residual_cpp,                                     1},
    {"_stochtree_get_tree_leaves_active_forest_cpp",                   (DL_FUNC) &_stochtree_get_tree_leaves_active_forest_cpp,                    2},
    {"_stochtree_get_tree_leaves_forest_container_cpp",                (DL_FUNC) &_stochtree_get_tree_leaves_forest_container_cpp,                 3},
    {"_stochtree_get_tree_split_counts_active_forest_cpp",             (DL_FUNC) &_stochtree_get_tree_split_counts_active_forest_cpp,              3},
    {"_stochtree_get_tree_split_counts_forest_container_cpp",          (DL_FUNC) &_stochtree_get_tree_split_counts_forest_container_cpp,           4},
    {"_stochtree_init_json_cpp",                                       (DL_FUNC) &_stochtree_init_json_cpp,                                        0},
    {"_stochtree_initialize_forest_model_active_forest_cpp",           (DL_FUNC) &_stochtree_initialize_forest_model_active_forest_cpp,            6},
    {"_stochtree_initialize_forest_model_cpp",                         (DL_FUNC) &_stochtree_initialize_forest_model_cpp,                          6},
    {"_stochtree_is_categorical_split_node_forest_container_cpp",      (DL_FUNC) &_stochtree_is_categorical_split_node_forest_container_cpp,       4},
    {"_stochtree_is_exponentiated_active_forest_cpp",                  (DL_FUNC) &_stochtree_is_exponentiated_active_forest_cpp,                   1},
    {"_stochtree_is_exponentiated_forest_container_cpp",               (DL_FUNC) &_stochtree_is_exponentiated_forest_container_cpp,                1},
    {"_stochtree_is_leaf_constant_active_forest_cpp",                  (DL_FUNC) &_stochtree_is_leaf_constant_active_forest_cpp,                   1},
    {"_stochtree_is_leaf_constant_forest_container_cpp",               (DL_FUNC) &_stochtree_is_leaf_constant_forest_container_cpp,                1},
    {"_stochtree_is_leaf_node_forest_container_cpp",                   (DL_FUNC) &_stochtree_is_leaf_node_forest_container_cpp,                    4},
    {"_stochtree_is_numeric_split_node_forest_container_cpp",          (DL_FUNC) &_stochtree_is_numeric_split_node_forest_container_cpp,           4},
    {"_stochtree_json_add_bool_cpp",                                   (DL_FUNC) &_stochtree_json_add_bool_cpp,                                    3},
    {"_stochtree_json_add_bool_subfolder_cpp",                         (DL_FUNC) &_stochtree_json_add_bool_subfolder_cpp,                          4},
    {"_stochtree_json_add_double_cpp",                                 (DL_FUNC) &_stochtree_json_add_double_cpp,                                  3},
    {"_stochtree_json_add_double_subfolder_cpp",                       (DL_FUNC) &_stochtree_json_add_double_subfolder_cpp,                        4},
    {"_stochtree_json_add_forest_cpp",                                 (DL_FUNC) &_stochtree_json_add_forest_cpp,                                  2},
    {"_stochtree_json_add_integer_cpp",                                (DL_FUNC) &_stochtree_json_add_integer_cpp,                                 3},
    {"_stochtree_json_add_integer_subfolder_cpp",                      (DL_FUNC) &_stochtree_json_add_integer_subfolder_cpp,                       4},
    {"_stochtree_json_add_integer_vector_cpp",                         (DL_FUNC) &_stochtree_json_add_integer_vector_cpp,                          3},
    {"_stochtree_json_add_integer_vector_subfolder_cpp",               (DL_FUNC) &_stochtree_json_add_integer_vector_subfolder_cpp,                4},
    {"_stochtree_json_add_rfx_container_cpp",                          (DL_FUNC) &_stochtree_json_add_rfx_container_cpp,                           2},
    {"_stochtree_json_add_rfx_groupids_cpp",                           (DL_FUNC) &_stochtree_json_add_rfx_groupids_cpp,                            2},
    {"_stochtree_json_add_rfx_label_mapper_cpp",                       (DL_FUNC) &_stochtree_json_add_rfx_label_mapper_cpp,                        2},
    {"_stochtree_json_add_string_cpp",                                 (DL_FUNC) &_stochtree_json_add_string_cpp,                                  3},
    {"_stochtree_json_add_string_subfolder_cpp",                       (DL_FUNC) &_stochtree_json_add_string_subfolder_cpp,                        4},
    {"_stochtree_json_add_string_vector_cpp",                          (DL_FUNC) &_stochtree_json_add_string_vector_cpp,                           3},
    {"_stochtree_json_add_string_vector_subfolder_cpp",                (DL_FUNC) &_stochtree_json_add_string_vector_subfolder_cpp,                 4},
    {"_stochtree_json_add_vector_cpp",                                 (DL_FUNC) &_stochtree_json_add_vector_cpp,                                  3},
    {"_stochtree_json_add_vector_subfolder_cpp",                       (DL_FUNC) &_stochtree_json_add_vector_subfolder_cpp,                        4},
    {"_stochtree_json_contains_field_cpp",                             (DL_FUNC) &_stochtree_json_contains_field_cpp,                              2},
    {"_stochtree_json_contains_field_subfolder_cpp",                   (DL_FUNC) &_stochtree_json_contains_field_subfolder_cpp,                    3},
    {"_stochtree_json_extract_bool_cpp",                               (DL_FUNC) &_stochtree_json_extract_bool_cpp,                                2},
    {"_stochtree_json_extract_bool_subfolder_cpp",                     (DL_FUNC) &_stochtree_json_extract_bool_subfolder_cpp,                      3},
    {"_stochtree_json_extract_double_cpp",                             (DL_FUNC) &_stochtree_json_extract_double_cpp,                              2},
    {"_stochtree_json_extract_double_subfolder_cpp",                   (DL_FUNC) &_stochtree_json_extract_double_subfolder_cpp,                    3},
    {"_stochtree_json_extract_integer_cpp",                            (DL_FUNC) &_stochtree_json_extract_integer_cpp,                             2},
    {"_stochtree_json_extract_integer_subfolder_cpp",                  (DL_FUNC) &_stochtree_json_extract_integer_subfolder_cpp,                   3},
    {"_stochtree_json_extract_integer_vector_cpp",                     (DL_FUNC) &_stochtree_json_extract_integer_vector_cpp,                      2},
    {"_stochtree_json_extract_integer_vector_subfolder_cpp",           (DL_FUNC) &_stochtree_json_extract_integer_vector_subfolder_cpp,            3},
    {"_stochtree_json_extract_string_cpp",                             (DL_FUNC) &_stochtree_json_extract_string_cpp,                              2},
    {"_stochtree_json_extract_string_subfolder_cpp",                   (DL_FUNC) &_stochtree_json_extract_string_subfolder_cpp,                    3},
    {"_stochtree_json_extract_string_vector_cpp",                      (DL_FUNC) &_stochtree_json_extract_string_vector_cpp,                       2},
    {"_stochtree_json_extract_string_vector_subfolder_cpp",            (DL_FUNC) &_stochtree_json_extract_string_vector_subfolder_cpp,             3},
    {"_stochtree_json_extract_vector_cpp",                             (DL_FUNC) &_stochtree_json_extract_vector_cpp,                              2},
    {"_stochtree_json_extract_vector_subfolder_cpp",                   (DL_FUNC) &_stochtree_json_extract_vector_subfolder_cpp,                    3},
    {"_stochtree_json_increment_rfx_count_cpp",                        (DL_FUNC) &_stochtree_json_increment_rfx_count_cpp,                         1},
    {"_stochtree_json_load_file_cpp",                                  (DL_FUNC) &_stochtree_json_load_file_cpp,                                   2},
    {"_stochtree_json_load_forest_container_cpp",                      (DL_FUNC) &_stochtree_json_load_forest_container_cpp,                       2},
    {"_stochtree_json_load_string_cpp",                                (DL_FUNC) &_stochtree_json_load_string_cpp,                                 2},
    {"_stochtree_json_save_file_cpp",                                  (DL_FUNC) &_stochtree_json_save_file_cpp,                                   2},
    {"_stochtree_json_save_forest_container_cpp",                      (DL_FUNC) &_stochtree_json_save_forest_container_cpp,                       2},
    {"_stochtree_leaf_dimension_active_forest_cpp",                    (DL_FUNC) &_stochtree_leaf_dimension_active_forest_cpp,                     1},
    {"_stochtree_leaf_dimension_forest_container_cpp",                 (DL_FUNC) &_stochtree_leaf_dimension_forest_container_cpp,                  1},
    {"_stochtree_leaf_values_forest_container_cpp",                    (DL_FUNC) &_stochtree_leaf_values_forest_container_cpp,                     4},
    {"_stochtree_leaves_forest_container_cpp",                         (DL_FUNC) &_stochtree_leaves_forest_container_cpp,                          3},
    {"_stochtree_left_child_node_forest_container_cpp",                (DL_FUNC) &_stochtree_left_child_node_forest_container_cpp,                 4},
    {"_stochtree_node_depth_forest_container_cpp",                     (DL_FUNC) &_stochtree_node_depth_forest_container_cpp,                      4},
    {"_stochtree_nodes_forest_container_cpp",                          (DL_FUNC) &_stochtree_nodes_forest_container_cpp,                           3},
    {"_stochtree_num_leaf_parents_forest_container_cpp",               (DL_FUNC) &_stochtree_num_leaf_parents_forest_container_cpp,                3},
    {"_stochtree_num_leaves_ensemble_forest_container_cpp",            (DL_FUNC) &_stochtree_num_leaves_ensemble_forest_container_cpp,             2},
    {"_stochtree_num_leaves_forest_container_cpp",                     (DL_FUNC) &_stochtree_num_leaves_forest_container_cpp,                      3},
    {"_stochtree_num_nodes_forest_container_cpp",                      (DL_FUNC) &_stochtree_num_nodes_forest_container_cpp,                       3},
    {"_stochtree_num_samples_forest_container_cpp",                    (DL_FUNC) &_stochtree_num_samples_forest_container_cpp,                     1},
    {"_stochtree_num_split_nodes_forest_container_cpp",                (DL_FUNC) &_stochtree_num_split_nodes_forest_container_cpp,                 3},
    {"_stochtree_num_trees_active_forest_cpp",                         (DL_FUNC) &_stochtree_num_trees_active_forest_cpp,                          1},
    {"_stochtree_num_trees_forest_container_cpp",                      (DL_FUNC) &_stochtree_num_trees_forest_container_cpp,                       1},
    {"_stochtree_overwrite_column_vector_cpp",                         (DL_FUNC) &_stochtree_overwrite_column_vector_cpp,                          2},
    {"_stochtree_parent_node_forest_container_cpp",                    (DL_FUNC) &_stochtree_parent_node_forest_container_cpp,                     4},
    {"_stochtree_predict_active_forest_cpp",                           (DL_FUNC) &_stochtree_predict_active_forest_cpp,                            2},
    {"_stochtree_predict_forest_cpp",                                  (DL_FUNC) &_stochtree_predict_forest_cpp,                                   2},
    {"_stochtree_predict_forest_raw_cpp",                              (DL_FUNC) &_stochtree_predict_forest_raw_cpp,                               2},
    {"_stochtree_predict_forest_raw_single_forest_cpp",                (DL_FUNC) &_stochtree_predict_forest_raw_single_forest_cpp,                 3},
    {"_stochtree_predict_forest_raw_single_tree_cpp",                  (DL_FUNC) &_stochtree_predict_forest_raw_single_tree_cpp,                   4},
    {"_stochtree_predict_raw_active_forest_cpp",                       (DL_FUNC) &_stochtree_predict_raw_active_forest_cpp,                        2},
    {"_stochtree_propagate_basis_update_active_forest_cpp",            (DL_FUNC) &_stochtree_propagate_basis_update_active_forest_cpp,             4},
    {"_stochtree_propagate_basis_update_forest_container_cpp",         (DL_FUNC) &_stochtree_propagate_basis_update_forest_container_cpp,          5},
    {"_stochtree_propagate_trees_column_vector_cpp",                   (DL_FUNC) &_stochtree_propagate_trees_column_vector_cpp,                    2},
    {"_stochtree_remove_sample_forest_container_cpp",                  (DL_FUNC) &_stochtree_remove_sample_forest_container_cpp,                   2},
    {"_stochtree_reset_active_forest_cpp",                             (DL_FUNC) &_stochtree_reset_active_forest_cpp,                              3},
    {"_stochtree_reset_forest_model_cpp",                              (DL_FUNC) &_stochtree_reset_forest_model_cpp,                               5},
    {"_stochtree_reset_rfx_model_cpp",                                 (DL_FUNC) &_stochtree_reset_rfx_model_cpp,                                  3},
    {"_stochtree_reset_rfx_tracker_cpp",                               (DL_FUNC) &_stochtree_reset_rfx_tracker_cpp,                                4},
    {"_stochtree_rfx_container_append_from_json_cpp",                  (DL_FUNC) &_stochtree_rfx_container_append_from_json_cpp,                   3},
    {"_stochtree_rfx_container_append_from_json_string_cpp",           (DL_FUNC) &_stochtree_rfx_container_append_from_json_string_cpp,            3},
    {"_stochtree_rfx_container_cpp",                                   (DL_FUNC) &_stochtree_rfx_container_cpp,                                    2},
    {"_stochtree_rfx_container_delete_sample_cpp",                     (DL_FUNC) &_stochtree_rfx_container_delete_sample_cpp,                      2},
    {"_stochtree_rfx_container_from_json_cpp",                         (DL_FUNC) &_stochtree_rfx_container_from_json_cpp,                          2},
    {"_stochtree_rfx_container_from_json_string_cpp",                  (DL_FUNC) &_stochtree_rfx_container_from_json_string_cpp,                   2},
    {"_stochtree_rfx_container_get_alpha_cpp",                         (DL_FUNC) &_stochtree_rfx_container_get_alpha_cpp,                          1},
    {"_stochtree_rfx_container_get_beta_cpp",                          (DL_FUNC) &_stochtree_rfx_container_get_beta_cpp,                           1},
    {"_stochtree_rfx_container_get_sigma_cpp",                         (DL_FUNC) &_stochtree_rfx_container_get_sigma_cpp,                          1},
    {"_stochtree_rfx_container_get_xi_cpp",                            (DL_FUNC) &_stochtree_rfx_container_get_xi_cpp,                             1},
    {"_stochtree_rfx_container_num_components_cpp",                    (DL_FUNC) &_stochtree_rfx_container_num_components_cpp,                     1},
    {"_stochtree_rfx_container_num_groups_cpp",                        (DL_FUNC) &_stochtree_rfx_container_num_groups_cpp,                         1},
    {"_stochtree_rfx_container_num_samples_cpp",                       (DL_FUNC) &_stochtree_rfx_container_num_samples_cpp,                        1},
    {"_stochtree_rfx_container_predict_cpp",                           (DL_FUNC) &_stochtree_rfx_container_predict_cpp,                            3},
    {"_stochtree_rfx_dataset_add_basis_cpp",                           (DL_FUNC) &_stochtree_rfx_dataset_add_basis_cpp,                            2},
    {"_stochtree_rfx_dataset_add_group_labels_cpp",                    (DL_FUNC) &_stochtree_rfx_dataset_add_group_labels_cpp,                     2},
    {"_stochtree_rfx_dataset_add_weights_cpp",                         (DL_FUNC) &_stochtree_rfx_dataset_add_weights_cpp,                          2},
    {"_stochtree_rfx_dataset_has_basis_cpp",                           (DL_FUNC) &_stochtree_rfx_dataset_has_basis_cpp,                            1},
    {"_stochtree_rfx_dataset_has_group_labels_cpp",                    (DL_FUNC) &_stochtree_rfx_dataset_has_group_labels_cpp,                     1},
    {"_stochtree_rfx_dataset_has_variance_weights_cpp",                (DL_FUNC) &_stochtree_rfx_dataset_has_variance_weights_cpp,                 1},
    {"_stochtree_rfx_dataset_num_rows_cpp",                            (DL_FUNC) &_stochtree_rfx_dataset_num_rows_cpp,                             1},
    {"_stochtree_rfx_group_ids_from_json_cpp",                         (DL_FUNC) &_stochtree_rfx_group_ids_from_json_cpp,                          2},
    {"_stochtree_rfx_group_ids_from_json_string_cpp",                  (DL_FUNC) &_stochtree_rfx_group_ids_from_json_string_cpp,                   2},
    {"_stochtree_rfx_label_mapper_cpp",                                (DL_FUNC) &_stochtree_rfx_label_mapper_cpp,                                 1},
    {"_stochtree_rfx_label_mapper_from_json_cpp",                      (DL_FUNC) &_stochtree_rfx_label_mapper_from_json_cpp,                       2},
    {"_stochtree_rfx_label_mapper_from_json_string_cpp",               (DL_FUNC) &_stochtree_rfx_label_mapper_from_json_string_cpp,                2},
    {"_stochtree_rfx_label_mapper_to_list_cpp",                        (DL_FUNC) &_stochtree_rfx_label_mapper_to_list_cpp,                         1},
    {"_stochtree_rfx_model_cpp",                                       (DL_FUNC) &_stochtree_rfx_model_cpp,                                        2},
    {"_stochtree_rfx_model_predict_cpp",                               (DL_FUNC) &_stochtree_rfx_model_predict_cpp,                                3},
    {"_stochtree_rfx_model_sample_random_effects_cpp",                 (DL_FUNC) &_stochtree_rfx_model_sample_random_effects_cpp,                  8},
    {"_stochtree_rfx_model_set_group_parameter_covariance_cpp",        (DL_FUNC) &_stochtree_rfx_model_set_group_parameter_covariance_cpp,         2},
    {"_stochtree_rfx_model_set_group_parameters_cpp",                  (DL_FUNC) &_stochtree_rfx_model_set_group_parameters_cpp,                   2},
    {"_stochtree_rfx_model_set_variance_prior_scale_cpp",              (DL_FUNC) &_stochtree_rfx_model_set_variance_prior_scale_cpp,               2},
    {"_stochtree_rfx_model_set_variance_prior_shape_cpp",              (DL_FUNC) &_stochtree_rfx_model_set_variance_prior_shape_cpp,               2},
    {"_stochtree_rfx_model_set_working_parameter_covariance_cpp",      (DL_FUNC) &_stochtree_rfx_model_set_working_parameter_covariance_cpp,       2},
    {"_stochtree_rfx_model_set_working_parameter_cpp",                 (DL_FUNC) &_stochtree_rfx_model_set_working_parameter_cpp,                  2},
    {"_stochtree_rfx_tracker_cpp",                                     (DL_FUNC) &_stochtree_rfx_tracker_cpp,                                      1},
    {"_stochtree_rfx_tracker_get_unique_group_ids_cpp",                (DL_FUNC) &_stochtree_rfx_tracker_get_unique_group_ids_cpp,                 1},
    {"_stochtree_right_child_node_forest_container_cpp",               (DL_FUNC) &_stochtree_right_child_node_forest_container_cpp,                4},
    {"_stochtree_rng_cpp",                                             (DL_FUNC) &_stochtree_rng_cpp,                                              1},
    {"_stochtree_root_reset_active_forest_cpp",                        (DL_FUNC) &_stochtree_root_reset_active_forest_cpp,                         1},
    {"_stochtree_root_reset_rfx_tracker_cpp",                          (DL_FUNC) &_stochtree_root_reset_rfx_tracker_cpp,                           4},
    {"_stochtree_sample_gfr_one_iteration_cpp",                        (DL_FUNC) &_stochtree_sample_gfr_one_iteration_cpp,                        16},
    {"_stochtree_sample_mcmc_one_iteration_cpp",                       (DL_FUNC) &_stochtree_sample_mcmc_one_iteration_cpp,                       16},
    {"_stochtree_sample_sigma2_one_iteration_cpp",                     (DL_FUNC) &_stochtree_sample_sigma2_one_iteration_cpp,                      5},
    {"_stochtree_sample_tau_one_iteration_cpp",                        (DL_FUNC) &_stochtree_sample_tau_one_iteration_cpp,                         4},
    {"_stochtree_set_leaf_value_active_forest_cpp",                    (DL_FUNC) &_stochtree_set_leaf_value_active_forest_cpp,                     2},
    {"_stochtree_set_leaf_value_forest_container_cpp",                 (DL_FUNC) &_stochtree_set_leaf_value_forest_container_cpp,                  2},
    {"_stochtree_set_leaf_vector_active_forest_cpp",                   (DL_FUNC) &_stochtree_set_leaf_vector_active_forest_cpp,                    2},
    {"_stochtree_set_leaf_vector_forest_container_cpp",                (DL_FUNC) &_stochtree_set_leaf_vector_forest_container_cpp,                 2},
    {"_stochtree_split_categories_forest_container_cpp",               (DL_FUNC) &_stochtree_split_categories_forest_container_cpp,                4},
    {"_stochtree_split_index_forest_container_cpp",                    (DL_FUNC) &_stochtree_split_index_forest_container_cpp,                     4},
    {"_stochtree_split_theshold_forest_container_cpp",                 (DL_FUNC) &_stochtree_split_theshold_forest_container_cpp,                  4},
    {"_stochtree_subtract_from_column_vector_cpp",                     (DL_FUNC) &_stochtree_subtract_from_column_vector_cpp,                      2},
    {"_stochtree_sum_leaves_squared_ensemble_forest_container_cpp",    (DL_FUNC) &_stochtree_sum_leaves_squared_ensemble_forest_container_cpp,     2},
    {"_stochtree_tree_prior_cpp",                                      (DL_FUNC) &_stochtree_tree_prior_cpp,                                       4},
    {"_stochtree_update_alpha_tree_prior_cpp",                         (DL_FUNC) &_stochtree_update_alpha_tree_prior_cpp,                          2},
    {"_stochtree_update_beta_tree_prior_cpp",                          (DL_FUNC) &_stochtree_update_beta_tree_prior_cpp,                           2},
    {"_stochtree_update_max_depth_tree_prior_cpp",                     (DL_FUNC) &_stochtree_update_max_depth_tree_prior_cpp,                      2},
    {"_stochtree_update_min_samples_leaf_tree_prior_cpp",              (DL_FUNC) &_stochtree_update_min_samples_leaf_tree_prior_cpp,               2},
    {NULL, NULL, 0}
};

RcppExport void R_init_bcf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
