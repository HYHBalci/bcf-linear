// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// run_mcmc_logistic_treat_inter
List run_mcmc_logistic_treat_inter(const arma::vec& y, const arma::mat& X, const arma::vec& z, int n_iter, int burn, int thin, double sigma2_prior_a, double sigma2_prior_b, double prop_sd_alpha, double prop_sd_bmain, double prop_sd_bint, double alpha_init, double sigma_init, bool interaction);
RcppExport SEXP _bcf_run_mcmc_logistic_treat_inter(SEXP ySEXP, SEXP XSEXP, SEXP zSEXP, SEXP n_iterSEXP, SEXP burnSEXP, SEXP thinSEXP, SEXP sigma2_prior_aSEXP, SEXP sigma2_prior_bSEXP, SEXP prop_sd_alphaSEXP, SEXP prop_sd_bmainSEXP, SEXP prop_sd_bintSEXP, SEXP alpha_initSEXP, SEXP sigma_initSEXP, SEXP interactionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_prior_a(sigma2_prior_aSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_prior_b(sigma2_prior_bSEXP);
    Rcpp::traits::input_parameter< double >::type prop_sd_alpha(prop_sd_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type prop_sd_bmain(prop_sd_bmainSEXP);
    Rcpp::traits::input_parameter< double >::type prop_sd_bint(prop_sd_bintSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_init(alpha_initSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_init(sigma_initSEXP);
    Rcpp::traits::input_parameter< bool >::type interaction(interactionSEXP);
    rcpp_result_gen = Rcpp::wrap(run_mcmc_logistic_treat_inter(y, X, z, n_iter, burn, thin, sigma2_prior_a, sigma2_prior_b, prop_sd_alpha, prop_sd_bmain, prop_sd_bint, alpha_init, sigma_init, interaction));
    return rcpp_result_gen;
END_RCPP
}
// bcfoverparRcppClean
List bcfoverparRcppClean(NumericVector y_, NumericVector z_, NumericVector w_, NumericVector x_con_, NumericVector x_mod_, List x_con_info_list, List x_mod_info_list, arma::mat random_des, arma::mat random_var, arma::mat random_var_ix, double random_var_df, int burn, int nd, int thin, int ntree_mod, int ntree_con, double lambda, double nu, double con_sd, double mod_sd, double con_alpha, double con_beta, double mod_alpha, double mod_beta, CharacterVector treef_con_name_, CharacterVector treef_mod_name_, int status_interval, bool RJ, bool use_mscale, bool use_bscale, bool b_half_normal, double trt_init, bool verbose_sigma, bool no_output);
RcppExport SEXP _bcf_bcfoverparRcppClean(SEXP y_SEXP, SEXP z_SEXP, SEXP w_SEXP, SEXP x_con_SEXP, SEXP x_mod_SEXP, SEXP x_con_info_listSEXP, SEXP x_mod_info_listSEXP, SEXP random_desSEXP, SEXP random_varSEXP, SEXP random_var_ixSEXP, SEXP random_var_dfSEXP, SEXP burnSEXP, SEXP ndSEXP, SEXP thinSEXP, SEXP ntree_modSEXP, SEXP ntree_conSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP con_sdSEXP, SEXP mod_sdSEXP, SEXP con_alphaSEXP, SEXP con_betaSEXP, SEXP mod_alphaSEXP, SEXP mod_betaSEXP, SEXP treef_con_name_SEXP, SEXP treef_mod_name_SEXP, SEXP status_intervalSEXP, SEXP RJSEXP, SEXP use_mscaleSEXP, SEXP use_bscaleSEXP, SEXP b_half_normalSEXP, SEXP trt_initSEXP, SEXP verbose_sigmaSEXP, SEXP no_outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y_(y_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z_(z_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_(w_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_con_(x_con_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_mod_(x_mod_SEXP);
    Rcpp::traits::input_parameter< List >::type x_con_info_list(x_con_info_listSEXP);
    Rcpp::traits::input_parameter< List >::type x_mod_info_list(x_mod_info_listSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_des(random_desSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_var(random_varSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_var_ix(random_var_ixSEXP);
    Rcpp::traits::input_parameter< double >::type random_var_df(random_var_dfSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_mod(ntree_modSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_con(ntree_conSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type con_sd(con_sdSEXP);
    Rcpp::traits::input_parameter< double >::type mod_sd(mod_sdSEXP);
    Rcpp::traits::input_parameter< double >::type con_alpha(con_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type con_beta(con_betaSEXP);
    Rcpp::traits::input_parameter< double >::type mod_alpha(mod_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type mod_beta(mod_betaSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_con_name_(treef_con_name_SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_mod_name_(treef_mod_name_SEXP);
    Rcpp::traits::input_parameter< int >::type status_interval(status_intervalSEXP);
    Rcpp::traits::input_parameter< bool >::type RJ(RJSEXP);
    Rcpp::traits::input_parameter< bool >::type use_mscale(use_mscaleSEXP);
    Rcpp::traits::input_parameter< bool >::type use_bscale(use_bscaleSEXP);
    Rcpp::traits::input_parameter< bool >::type b_half_normal(b_half_normalSEXP);
    Rcpp::traits::input_parameter< double >::type trt_init(trt_initSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose_sigma(verbose_sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type no_output(no_outputSEXP);
    rcpp_result_gen = Rcpp::wrap(bcfoverparRcppClean(y_, z_, w_, x_con_, x_mod_, x_con_info_list, x_mod_info_list, random_des, random_var, random_var_ix, random_var_df, burn, nd, thin, ntree_mod, ntree_con, lambda, nu, con_sd, mod_sd, con_alpha, con_beta, mod_alpha, mod_beta, treef_con_name_, treef_mod_name_, status_interval, RJ, use_mscale, use_bscale, b_half_normal, trt_init, verbose_sigma, no_output));
    return rcpp_result_gen;
END_RCPP
}
// bcfoverparRcppCleanLinear
List bcfoverparRcppCleanLinear(NumericVector y_, NumericVector z_, NumericVector w_, NumericVector x_con_, NumericVector x_mod_, List x_con_info_list, List x_mod_info_list, arma::mat random_des, arma::mat random_var, arma::mat random_var_ix, double random_var_df, int burn, int nd, int thin, int ntree_mod, int ntree_con, double lambda, double nu, double con_sd, double mod_sd, double con_alpha, double con_beta, double mod_alpha, double mod_beta, CharacterVector treef_con_name_, CharacterVector treef_mod_name_, int status_interval, bool RJ, bool use_mscale, bool use_bscale, bool b_half_normal, double trt_init, bool verbose_sigma, bool no_output, bool intTreat, bool hamiltonian);
RcppExport SEXP _bcf_bcfoverparRcppCleanLinear(SEXP y_SEXP, SEXP z_SEXP, SEXP w_SEXP, SEXP x_con_SEXP, SEXP x_mod_SEXP, SEXP x_con_info_listSEXP, SEXP x_mod_info_listSEXP, SEXP random_desSEXP, SEXP random_varSEXP, SEXP random_var_ixSEXP, SEXP random_var_dfSEXP, SEXP burnSEXP, SEXP ndSEXP, SEXP thinSEXP, SEXP ntree_modSEXP, SEXP ntree_conSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP con_sdSEXP, SEXP mod_sdSEXP, SEXP con_alphaSEXP, SEXP con_betaSEXP, SEXP mod_alphaSEXP, SEXP mod_betaSEXP, SEXP treef_con_name_SEXP, SEXP treef_mod_name_SEXP, SEXP status_intervalSEXP, SEXP RJSEXP, SEXP use_mscaleSEXP, SEXP use_bscaleSEXP, SEXP b_half_normalSEXP, SEXP trt_initSEXP, SEXP verbose_sigmaSEXP, SEXP no_outputSEXP, SEXP intTreatSEXP, SEXP hamiltonianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y_(y_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z_(z_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_(w_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_con_(x_con_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_mod_(x_mod_SEXP);
    Rcpp::traits::input_parameter< List >::type x_con_info_list(x_con_info_listSEXP);
    Rcpp::traits::input_parameter< List >::type x_mod_info_list(x_mod_info_listSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_des(random_desSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_var(random_varSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_var_ix(random_var_ixSEXP);
    Rcpp::traits::input_parameter< double >::type random_var_df(random_var_dfSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_mod(ntree_modSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_con(ntree_conSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type con_sd(con_sdSEXP);
    Rcpp::traits::input_parameter< double >::type mod_sd(mod_sdSEXP);
    Rcpp::traits::input_parameter< double >::type con_alpha(con_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type con_beta(con_betaSEXP);
    Rcpp::traits::input_parameter< double >::type mod_alpha(mod_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type mod_beta(mod_betaSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_con_name_(treef_con_name_SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_mod_name_(treef_mod_name_SEXP);
    Rcpp::traits::input_parameter< int >::type status_interval(status_intervalSEXP);
    Rcpp::traits::input_parameter< bool >::type RJ(RJSEXP);
    Rcpp::traits::input_parameter< bool >::type use_mscale(use_mscaleSEXP);
    Rcpp::traits::input_parameter< bool >::type use_bscale(use_bscaleSEXP);
    Rcpp::traits::input_parameter< bool >::type b_half_normal(b_half_normalSEXP);
    Rcpp::traits::input_parameter< double >::type trt_init(trt_initSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose_sigma(verbose_sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type no_output(no_outputSEXP);
    Rcpp::traits::input_parameter< bool >::type intTreat(intTreatSEXP);
    Rcpp::traits::input_parameter< bool >::type hamiltonian(hamiltonianSEXP);
    rcpp_result_gen = Rcpp::wrap(bcfoverparRcppCleanLinear(y_, z_, w_, x_con_, x_mod_, x_con_info_list, x_mod_info_list, random_des, random_var, random_var_ix, random_var_df, burn, nd, thin, ntree_mod, ntree_con, lambda, nu, con_sd, mod_sd, con_alpha, con_beta, mod_alpha, mod_beta, treef_con_name_, treef_mod_name_, status_interval, RJ, use_mscale, use_bscale, b_half_normal, trt_init, verbose_sigma, no_output, intTreat, hamiltonian));
    return rcpp_result_gen;
END_RCPP
}
// bcflineartwo
List bcflineartwo(NumericVector y_, NumericVector z_, NumericVector w_, NumericVector x_con_, NumericVector x_mod_, List x_con_info_list, List x_mod_info_list, arma::mat random_des, arma::mat random_var, arma::mat random_var_ix, double random_var_df, int burn, int nd, int thin, int ntree_mod, int ntree_con, double lambda, double nu, double con_sd, double mod_sd, double con_alpha, double con_beta, double mod_alpha, double mod_beta, CharacterVector treef_con_name_, CharacterVector treef_mod_name_, int status_interval, bool RJ, bool use_mscale, bool use_bscale, bool b_half_normal, double trt_init, bool verbose_sigma, bool no_output, bool tian);
RcppExport SEXP _bcf_bcflineartwo(SEXP y_SEXP, SEXP z_SEXP, SEXP w_SEXP, SEXP x_con_SEXP, SEXP x_mod_SEXP, SEXP x_con_info_listSEXP, SEXP x_mod_info_listSEXP, SEXP random_desSEXP, SEXP random_varSEXP, SEXP random_var_ixSEXP, SEXP random_var_dfSEXP, SEXP burnSEXP, SEXP ndSEXP, SEXP thinSEXP, SEXP ntree_modSEXP, SEXP ntree_conSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP con_sdSEXP, SEXP mod_sdSEXP, SEXP con_alphaSEXP, SEXP con_betaSEXP, SEXP mod_alphaSEXP, SEXP mod_betaSEXP, SEXP treef_con_name_SEXP, SEXP treef_mod_name_SEXP, SEXP status_intervalSEXP, SEXP RJSEXP, SEXP use_mscaleSEXP, SEXP use_bscaleSEXP, SEXP b_half_normalSEXP, SEXP trt_initSEXP, SEXP verbose_sigmaSEXP, SEXP no_outputSEXP, SEXP tianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y_(y_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z_(z_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_(w_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_con_(x_con_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_mod_(x_mod_SEXP);
    Rcpp::traits::input_parameter< List >::type x_con_info_list(x_con_info_listSEXP);
    Rcpp::traits::input_parameter< List >::type x_mod_info_list(x_mod_info_listSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_des(random_desSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_var(random_varSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_var_ix(random_var_ixSEXP);
    Rcpp::traits::input_parameter< double >::type random_var_df(random_var_dfSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_mod(ntree_modSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_con(ntree_conSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type con_sd(con_sdSEXP);
    Rcpp::traits::input_parameter< double >::type mod_sd(mod_sdSEXP);
    Rcpp::traits::input_parameter< double >::type con_alpha(con_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type con_beta(con_betaSEXP);
    Rcpp::traits::input_parameter< double >::type mod_alpha(mod_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type mod_beta(mod_betaSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_con_name_(treef_con_name_SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_mod_name_(treef_mod_name_SEXP);
    Rcpp::traits::input_parameter< int >::type status_interval(status_intervalSEXP);
    Rcpp::traits::input_parameter< bool >::type RJ(RJSEXP);
    Rcpp::traits::input_parameter< bool >::type use_mscale(use_mscaleSEXP);
    Rcpp::traits::input_parameter< bool >::type use_bscale(use_bscaleSEXP);
    Rcpp::traits::input_parameter< bool >::type b_half_normal(b_half_normalSEXP);
    Rcpp::traits::input_parameter< double >::type trt_init(trt_initSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose_sigma(verbose_sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type no_output(no_outputSEXP);
    Rcpp::traits::input_parameter< bool >::type tian(tianSEXP);
    rcpp_result_gen = Rcpp::wrap(bcflineartwo(y_, z_, w_, x_con_, x_mod_, x_con_info_list, x_mod_info_list, random_des, random_var, random_var_ix, random_var_df, burn, nd, thin, ntree_mod, ntree_con, lambda, nu, con_sd, mod_sd, con_alpha, con_beta, mod_alpha, mod_beta, treef_con_name_, treef_mod_name_, status_interval, RJ, use_mscale, use_bscale, b_half_normal, trt_init, verbose_sigma, no_output, tian));
    return rcpp_result_gen;
END_RCPP
}
// sample_beta_j
double sample_beta_j(int N, NumericVector r_beta, NumericVector z, NumericVector w_j, double tau_j, double sigma);
RcppExport SEXP _bcf_sample_beta_j(SEXP NSEXP, SEXP r_betaSEXP, SEXP zSEXP, SEXP w_jSEXP, SEXP tau_jSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_beta(r_betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_j(w_jSEXP);
    Rcpp::traits::input_parameter< double >::type tau_j(tau_jSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_beta_j(N, r_beta, z, w_j, tau_j, sigma));
    return rcpp_result_gen;
END_RCPP
}
// sample_tau_j_slice
double sample_tau_j_slice(double tau_old, double beta_j, double sigma, double step_out, int max_steps);
RcppExport SEXP _bcf_sample_tau_j_slice(SEXP tau_oldSEXP, SEXP beta_jSEXP, SEXP sigmaSEXP, SEXP step_outSEXP, SEXP max_stepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type tau_old(tau_oldSEXP);
    Rcpp::traits::input_parameter< double >::type beta_j(beta_jSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type step_out(step_outSEXP);
    Rcpp::traits::input_parameter< int >::type max_steps(max_stepsSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_tau_j_slice(tau_old, beta_j, sigma, step_out, max_steps));
    return rcpp_result_gen;
END_RCPP
}
// sample_alpha
double sample_alpha(int N, NumericVector r_alpha, NumericVector z_, double sigma, double alpha_prior_sd);
RcppExport SEXP _bcf_sample_alpha(SEXP NSEXP, SEXP r_alphaSEXP, SEXP z_SEXP, SEXP sigmaSEXP, SEXP alpha_prior_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_alpha(r_alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z_(z_SEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_prior_sd(alpha_prior_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_alpha(N, r_alpha, z_, sigma, alpha_prior_sd));
    return rcpp_result_gen;
END_RCPP
}
// sample_sigma2_ig
double sample_sigma2_ig(int N, NumericVector resid, double shape_prior, double rate_prior);
RcppExport SEXP _bcf_sample_sigma2_ig(SEXP NSEXP, SEXP residSEXP, SEXP shape_priorSEXP, SEXP rate_priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type resid(residSEXP);
    Rcpp::traits::input_parameter< double >::type shape_prior(shape_priorSEXP);
    Rcpp::traits::input_parameter< double >::type rate_prior(rate_priorSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_sigma2_ig(N, resid, shape_prior, rate_prior));
    return rcpp_result_gen;
END_RCPP
}
// log_posterior_linked_shrinkage
double log_posterior_linked_shrinkage(const arma::vec& param, const arma::mat& X, const arma::vec& y);
RcppExport SEXP _bcf_log_posterior_linked_shrinkage(SEXP paramSEXP, SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type param(paramSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(log_posterior_linked_shrinkage(param, X, y));
    return rcpp_result_gen;
END_RCPP
}
// grad_log_posterior_linked_shrinkage
arma::vec grad_log_posterior_linked_shrinkage(const arma::vec& param, const arma::mat& X, const arma::vec& y);
RcppExport SEXP _bcf_grad_log_posterior_linked_shrinkage(SEXP paramSEXP, SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type param(paramSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(grad_log_posterior_linked_shrinkage(param, X, y));
    return rcpp_result_gen;
END_RCPP
}
// leapfrogCpp
Rcpp::List leapfrogCpp(arma::vec param, arma::vec momentum, double step_size, int num_steps, const arma::mat& X, const arma::vec& y);
RcppExport SEXP _bcf_leapfrogCpp(SEXP paramSEXP, SEXP momentumSEXP, SEXP step_sizeSEXP, SEXP num_stepsSEXP, SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type param(paramSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type num_steps(num_stepsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(leapfrogCpp(param, momentum, step_size, num_steps, X, y));
    return rcpp_result_gen;
END_RCPP
}
// test_visibility
int test_visibility();
RcppExport SEXP _bcf_test_visibility() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test_visibility());
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_TreeSamples();

static const R_CallMethodDef CallEntries[] = {
    {"_bcf_run_mcmc_logistic_treat_inter", (DL_FUNC) &_bcf_run_mcmc_logistic_treat_inter, 14},
    {"_bcf_bcfoverparRcppClean", (DL_FUNC) &_bcf_bcfoverparRcppClean, 34},
    {"_bcf_bcfoverparRcppCleanLinear", (DL_FUNC) &_bcf_bcfoverparRcppCleanLinear, 36},
    {"_bcf_bcflineartwo", (DL_FUNC) &_bcf_bcflineartwo, 35},
    {"_bcf_sample_beta_j", (DL_FUNC) &_bcf_sample_beta_j, 6},
    {"_bcf_sample_tau_j_slice", (DL_FUNC) &_bcf_sample_tau_j_slice, 5},
    {"_bcf_sample_alpha", (DL_FUNC) &_bcf_sample_alpha, 5},
    {"_bcf_sample_sigma2_ig", (DL_FUNC) &_bcf_sample_sigma2_ig, 4},
    {"_bcf_log_posterior_linked_shrinkage", (DL_FUNC) &_bcf_log_posterior_linked_shrinkage, 3},
    {"_bcf_grad_log_posterior_linked_shrinkage", (DL_FUNC) &_bcf_grad_log_posterior_linked_shrinkage, 3},
    {"_bcf_leapfrogCpp", (DL_FUNC) &_bcf_leapfrogCpp, 6},
    {"_bcf_test_visibility", (DL_FUNC) &_bcf_test_visibility, 0},
    {"_rcpp_module_boot_TreeSamples", (DL_FUNC) &_rcpp_module_boot_TreeSamples, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_bcf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
